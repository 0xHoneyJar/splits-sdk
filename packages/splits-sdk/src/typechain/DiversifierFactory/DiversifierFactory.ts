/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type CreateOracleParamsStruct = {
  factory: PromiseOrValue<string>;
  data: PromiseOrValue<BytesLike>;
};

export type CreateOracleParamsStructOutput = [string, string] & {
  factory: string;
  data: string;
};

export type OracleParamsStruct = {
  oracle: PromiseOrValue<string>;
  createOracleParams: CreateOracleParamsStruct;
};

export type OracleParamsStructOutput = [
  string,
  CreateOracleParamsStructOutput
] & { oracle: string; createOracleParams: CreateOracleParamsStructOutput };

export declare namespace DiversifierFactory {
  export type CreateSwapperParamsStruct = {
    beneficiary: PromiseOrValue<string>;
    tokenToBeneficiary: PromiseOrValue<string>;
  };

  export type CreateSwapperParamsStructOutput = [string, string] & {
    beneficiary: string;
    tokenToBeneficiary: string;
  };

  export type RecipientParamsStruct = {
    account: PromiseOrValue<string>;
    createSwapperParams: DiversifierFactory.CreateSwapperParamsStruct;
    percentAllocation: PromiseOrValue<BigNumberish>;
  };

  export type RecipientParamsStructOutput = [
    string,
    DiversifierFactory.CreateSwapperParamsStructOutput,
    number
  ] & {
    account: string;
    createSwapperParams: DiversifierFactory.CreateSwapperParamsStructOutput;
    percentAllocation: number;
  };

  export type CreateDiversifierParamsStruct = {
    owner: PromiseOrValue<string>;
    paused: PromiseOrValue<boolean>;
    oracleParams: OracleParamsStruct;
    recipientParams: DiversifierFactory.RecipientParamsStruct[];
  };

  export type CreateDiversifierParamsStructOutput = [
    string,
    boolean,
    OracleParamsStructOutput,
    DiversifierFactory.RecipientParamsStructOutput[]
  ] & {
    owner: string;
    paused: boolean;
    oracleParams: OracleParamsStructOutput;
    recipientParams: DiversifierFactory.RecipientParamsStructOutput[];
  };
}

export interface DiversifierFactoryInterface extends utils.Interface {
  functions: {
    "createDiversifier((address,bool,(address,(address,bytes)),(address,(address,address),uint32)[]))": FunctionFragment;
    "passThroughWalletFactory()": FunctionFragment;
    "splitMain()": FunctionFragment;
    "swapperFactory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createDiversifier"
      | "passThroughWalletFactory"
      | "splitMain"
      | "swapperFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createDiversifier",
    values: [DiversifierFactory.CreateDiversifierParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "passThroughWalletFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "splitMain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapperFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createDiversifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "passThroughWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitMain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapperFactory",
    data: BytesLike
  ): Result;

  events: {
    "CreateDiversifier(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateDiversifier"): EventFragment;
}

export interface CreateDiversifierEventObject {
  diversifier: string;
}
export type CreateDiversifierEvent = TypedEvent<
  [string],
  CreateDiversifierEventObject
>;

export type CreateDiversifierEventFilter =
  TypedEventFilter<CreateDiversifierEvent>;

export interface DiversifierFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiversifierFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createDiversifier(
      params_: DiversifierFactory.CreateDiversifierParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    passThroughWalletFactory(overrides?: CallOverrides): Promise<[string]>;

    splitMain(overrides?: CallOverrides): Promise<[string]>;

    swapperFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  createDiversifier(
    params_: DiversifierFactory.CreateDiversifierParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  passThroughWalletFactory(overrides?: CallOverrides): Promise<string>;

  splitMain(overrides?: CallOverrides): Promise<string>;

  swapperFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createDiversifier(
      params_: DiversifierFactory.CreateDiversifierParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    passThroughWalletFactory(overrides?: CallOverrides): Promise<string>;

    splitMain(overrides?: CallOverrides): Promise<string>;

    swapperFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CreateDiversifier(address)"(
      diversifier?: PromiseOrValue<string> | null
    ): CreateDiversifierEventFilter;
    CreateDiversifier(
      diversifier?: PromiseOrValue<string> | null
    ): CreateDiversifierEventFilter;
  };

  estimateGas: {
    createDiversifier(
      params_: DiversifierFactory.CreateDiversifierParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    passThroughWalletFactory(overrides?: CallOverrides): Promise<BigNumber>;

    splitMain(overrides?: CallOverrides): Promise<BigNumber>;

    swapperFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createDiversifier(
      params_: DiversifierFactory.CreateDiversifierParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    passThroughWalletFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splitMain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapperFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
