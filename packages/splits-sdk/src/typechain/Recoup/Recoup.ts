/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Recoup {
  export type TrancheStruct = {
    recipients: PromiseOrValue<string>[];
    percentAllocations: PromiseOrValue<BigNumberish>[];
    controller: PromiseOrValue<string>;
    distributorFee: PromiseOrValue<BigNumberish>;
  };

  export type TrancheStructOutput = [string[], number[], string, number] & {
    recipients: string[];
    percentAllocations: number[];
    controller: string;
    distributorFee: number;
  };
}

export interface RecoupInterface extends utils.Interface {
  functions: {
    "PERCENTAGE_SCALE()": FunctionFragment;
    "createRecoup(address,address,uint256,(address[],uint32[],address,uint32)[],uint256[])": FunctionFragment;
    "splitMain()": FunctionFragment;
    "waterfallModuleFactory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PERCENTAGE_SCALE"
      | "createRecoup"
      | "splitMain"
      | "waterfallModuleFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PERCENTAGE_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createRecoup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      Recoup.TrancheStruct[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "splitMain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "waterfallModuleFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "PERCENTAGE_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRecoup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitMain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "waterfallModuleFactory",
    data: BytesLike
  ): Result;

  events: {
    "CreateRecoup(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateRecoup"): EventFragment;
}

export interface CreateRecoupEventObject {
  waterfallModule: string;
}
export type CreateRecoupEvent = TypedEvent<[string], CreateRecoupEventObject>;

export type CreateRecoupEventFilter = TypedEventFilter<CreateRecoupEvent>;

export interface Recoup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RecoupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    createRecoup(
      token: PromiseOrValue<string>,
      nonWaterfallRecipientAddress: PromiseOrValue<string>,
      nonWaterfallRecipientTrancheIndex: PromiseOrValue<BigNumberish>,
      tranches: Recoup.TrancheStruct[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitMain(overrides?: CallOverrides): Promise<[string]>;

    waterfallModuleFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  createRecoup(
    token: PromiseOrValue<string>,
    nonWaterfallRecipientAddress: PromiseOrValue<string>,
    nonWaterfallRecipientTrancheIndex: PromiseOrValue<BigNumberish>,
    tranches: Recoup.TrancheStruct[],
    thresholds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitMain(overrides?: CallOverrides): Promise<string>;

  waterfallModuleFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    createRecoup(
      token: PromiseOrValue<string>,
      nonWaterfallRecipientAddress: PromiseOrValue<string>,
      nonWaterfallRecipientTrancheIndex: PromiseOrValue<BigNumberish>,
      tranches: Recoup.TrancheStruct[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    splitMain(overrides?: CallOverrides): Promise<string>;

    waterfallModuleFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CreateRecoup(address)"(waterfallModule?: null): CreateRecoupEventFilter;
    CreateRecoup(waterfallModule?: null): CreateRecoupEventFilter;
  };

  estimateGas: {
    PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    createRecoup(
      token: PromiseOrValue<string>,
      nonWaterfallRecipientAddress: PromiseOrValue<string>,
      nonWaterfallRecipientTrancheIndex: PromiseOrValue<BigNumberish>,
      tranches: Recoup.TrancheStruct[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitMain(overrides?: CallOverrides): Promise<BigNumber>;

    waterfallModuleFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createRecoup(
      token: PromiseOrValue<string>,
      nonWaterfallRecipientAddress: PromiseOrValue<string>,
      nonWaterfallRecipientTrancheIndex: PromiseOrValue<BigNumberish>,
      tranches: Recoup.TrancheStruct[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitMain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    waterfallModuleFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
